version: "3.9"

x-backend-env: &backend_env
  POSTGRES_HOST: db
  POSTGRES_PORT: 5432
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}
  REDIS_URL: ${REDIS_URL}
  CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
  SECRET_KEY: ${SECRET_KEY}

x-frontend-base: &frontend_base
  build:
    context: ./frontend
    args:
      VITE_API_URL: ${VITE_API_URL}      # Corrected: key-value, not list
  env_file: 
    - .env
  depends_on:
    backend:
      condition: service_healthy
  expose:
    - "80"
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost"]
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - app-network
  restart: unless-stopped

services:
  db:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build: ./backend
    env_file:
      - .env
    environment: 
      <<: *backend_env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    restart: unless-stopped

  worker:
    build: ./backend
    env_file:
      - .env
    environment:
      <<: *backend_env
    command: celery -A app.celery_worker.celery_app worker --loglevel=info
    depends_on:
      backend:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  beat:
    build: ./backend
    env_file:
      - .env
    environment:
      <<: *backend_env
    command: celery -A app.celery_worker.celery_app beat --loglevel=info
    depends_on:
      backend:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  frontend1:
    <<: *frontend_base
    container_name: frontend1

  frontend2:
    <<: *frontend_base
    container_name: frontend2

  frontend3:
    <<: *frontend_base
    container_name: frontend3

  nginx:
    image: nginx:stable-alpine
    container_name: load_balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend1:
        condition: service_healthy
      frontend2:
        condition: service_healthy
      frontend3:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
